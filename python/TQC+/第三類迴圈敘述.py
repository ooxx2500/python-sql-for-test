# -*- coding: utf-8 -*-
"""
Created on Tue May 26 14:50:22 2020

@author: ASUS
"""

'''
301
2. 設計說明：
請使用迴圈敘述撰寫一程式，讓使用者輸入兩個正整數a、b（a < b），利用迴圈計算從a開
始連加到b的總和。例如：輸入a=1、b=100，則輸出結果為5050（1 + 2 + … + 100 = 5050）。

3. 輸入輸出：
輸入說明
兩個正整數（a、b，且a < b）

輸出說明
計算從a開始連加到b的總和

輸入輸出範例
範例輸入
66
666
範例輸出
219966
'''

# TODO
a = int(input())
b = int(input())
ans = 0
for i in range(a,b+1):
    ans += i 
print(ans)





'''
302
2. 設計說明：
請使用迴圈敘述撰寫一程式，讓使用者輸入兩個正整數a、b（a < b），利用迴圈計算從a開始
的偶數連加到b的總和。例如：輸入a=1、b=100，則輸出結果為2550（2 + 4 + … + 100 = 2550）。

3. 輸入輸出：
輸入說明
兩個正整數（a、b，且a < b）

輸出說明
計算從a開始的偶數連加到b的總和

輸入輸出範例
範例輸入
14
1144
範例輸出
327714
'''

# TODO


a = int(input())
b = int(input())
ans = 0
for i in range(a,b+1):
    if i % 2 ==0:
        ans += i
print(ans)











'''
304
請使用迴圈敘述撰寫一程式，讓使用者輸入一個正整數a，利用迴圈計算從1到a之間，所有5之倍數
數字總和。

3. 輸入輸出：
輸入說明
一個正整數

輸出說明
所有5之倍數數字總和

輸入輸出範例
範例輸入
21
範例輸出
50
'''

# TODO
a = int(input())
total =0
for i in range(1,a+1):
    if i %5==0:
        total+=i
print(total)
        









'''
305
2. 設計說明：
請撰寫一程式，讓使用者輸入一個正整數，將此數值以反轉的順序輸出。

3. 輸入輸出：
輸入說明
一個正整數

輸出說明
將此數值以反轉的順序輸出

輸入輸出範例
範例輸入1
31283
範例輸出1
38213
範例輸入2
1003120
範例輸出2
0213001
'''

# TODO


a = int(input())
while a !=0:
    print(a%10,end='')
    a//=10  #a = a // 10



'''
306
2. 設計說明：
請使用迴圈敘述撰寫一程式，讓使用者輸入一個正整數n，利用迴圈計算並輸出n!的值。

3. 輸入輸出：
輸入說明
一個正整數

輸出說明
計算n!的值

輸入輸出範例
範例輸入
15
範例輸出
1307674368000
'''
# TODO
n = int(input())
result = 1
for i in range(1,n+1):
    result *=i
print(result)






'''
308
設計說明：
請使用迴圈敘述撰寫一程式，要求使用者輸入一個數字，此數字代表後面測試資料的數量。每一筆測
試資料是一個正整數（由使用者輸入），將此正整數的每位數全部加總起來。

3. 輸入輸出：
輸入說明
先輸入一個正整數代表後面測試資料的數量
依測試資料的數量，再輸入正整數的測試資料

輸出說明
將測試資料的每位數全部加總

輸入輸出範例
輸入與輸出會交雜如下，輸出的部份以粗體字表示 1
1
98765
Sum of all digits of 98765 is 35

輸入與輸出會交雜如下，輸出的部份以粗體字表示 2
3
32412
Sum of all digits of 32412 is 12
0
Sum of all digits of 0 is 0
769
Sum of all digits of 769 is 22
'''

# TODO
"""
Sum of all digits of _ is _
"""
total = eval(input())
for i in range(total):
    num = eval(input())
    tmp = num
    sum_digit=0
    while tmp!=0:
        sum_digit += tmp%10
        tmp //= 10
    print('Sum of all digits of %d is %d' % (num,sum_digit))









'''
309
設計說明：
請使用迴圈敘述撰寫一程式，提示使用者輸入金額（如10,000）、年收益率（如5.75），以及經過的月份數（如5），接著顯示每個月的存款總額。

提示：四捨五入，輸出浮點數到小數點後第二位。

舉例：
假設您存款$10,000，年收益為5.75%。
過了一個月，存款會是：10000 + 10000 * 5.75 / 1200 = 10047.92
過了兩個月，存款會是：10047.92 + 10047.92 * 5.75 / 1200 = 10096.06
過了三個月，存款將是：10096.06 + 10096.06 * 5.75 / 1200 = 10144.44
以此類推。

3. 輸入輸出：
輸入說明
一個正整數（金額）、一個正數（收益率）及一個正整數（月份）

輸出說明
格式化輸出每個月的存款總額

輸入輸出範例
範例輸入
50000
1.3
5
範例輸出
Month 	  Amount
  1 	 50054.17
  2 	 50108.39
  3 	 50162.68
  4 	 50217.02
  5 	 50271.42
'''
amount = eval(input())
rate = eval(input())
months = eval(input())
total = amount
#TODO

#此為格式化輸出之標頭
print('%s \t  %s' % ('Month', 'Amount'))
#TODO
for i in range(1,months+1):
    total+=total*rate/1200

    #此為格式化輸出之內容，需置於置於迴圈中
    print('%3d \t %.2f' % (i, total))











'''
310
2. 設計說明：
請使用迴圈敘述撰寫一程式，讓使用者輸入正整數n (1 < n)，計算以下公式的總和並顯示結果：

 
提示：輸出結果至小數點後四位。

3. 輸入輸出：
輸入說明
一個正整數

輸出說明
代入公式計算結果

輸入輸出範例
範例輸入
8
範例輸出
1.8284
'''

# TODO

n = eval(input())
sum = 0
for i in range(2,n+1):
    sum+=1/((i-1)**0.5+i**0.5)

print('%.4f'% sum)










'''
!!!!!!!!!!!!!!!!!!!!
303
請使用迴圈敘述撰寫一程式，讓使用者輸入一個正整數（<100），然後以三角形的方式依序輸出此數的相乘結果。

提示：輸出欄寬為4，且需靠右對齊。

3. 輸入輸出：
輸入說明
一個正整數（<100）

輸出說明
輸入輸出範例
以三角形的方式依序輸出此數的階乘結果

範例輸入1
5
範例輸出1
   1
   2   4
   3   6   9
   4   8  12  16
   5  10  15  20  25
範例輸入2
12
範例輸出2
   1
   2   4
   3   6   9
   4   8  12  16
   5  10  15  20  25
   6  12  18  24  30  36
   7  14  21  28  35  42  49
   8  16  24  32  40  48  56  64
   9  18  27  36  45  54  63  72  81
  10  20  30  40  50  60  70  80  90 100
  11  22  33  44  55  66  77  88  99 110 121
  12  24  36  48  60  72  84  96 108 120 132 144
'''
# TODO
num = int(input())

for i in range(1,num+1):
    for j in range(1,i+1):
        print('%4d'%(i*j),end='')
    print()








'''
307
2. 設計說明：
(1) 請使用迴圈敘述撰寫一程式，要求使用者輸入一個正整數n（n<10），顯示n*n乘法表。

(2) 每項運算式需進行格式化排列整齊，每個運算子及運算元輸出的欄寬為2，而每項乘積輸出的欄寬為4，皆靠左對齊不跳行。

3. 輸入輸出：
輸入說明
一個正整數n（n<10）

輸出說明
輸出格式化的n*n乘法表

輸入輸出範例
範例輸入1
3
範例輸出1
1 * 1 = 1   2 * 1 = 2   3 * 1 = 3   
1 * 2 = 2   2 * 2 = 4   3 * 2 = 6   
1 * 3 = 3   2 * 3 = 6   3 * 3 = 9   
範例輸入2
5
範例輸出2
1 * 1 = 1   2 * 1 = 2   3 * 1 = 3   4 * 1 = 4   5 * 1 = 5   
1 * 2 = 2   2 * 2 = 4   3 * 2 = 6   4 * 2 = 8   5 * 2 = 10  
1 * 3 = 3   2 * 3 = 6   3 * 3 = 9   4 * 3 = 12  5 * 3 = 15  
1 * 4 = 4   2 * 4 = 8   3 * 4 = 12  4 * 4 = 16  5 * 4 = 20  
1 * 5 = 5   2 * 5 = 10  3 * 5 = 15  4 * 5 = 20  5 * 5 = 25 
'''
# TODO
n = eval(input())
for i in range(1,n+1):
    for j in range(1,n+1):
        print('%-2d* %-2d= %-4d' % (j,i,(j*i)),end='')
    print()





